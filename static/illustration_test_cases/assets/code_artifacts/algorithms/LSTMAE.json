{
  "Train": [
    "# Model training\n",
    "# Algo/LSTMAE\n",
    "\n",
    "def LSTMAE(TIME_STEPS, nb_entries):\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(100, activation='relu', return_sequences=True,\n",
    "    input_shape=(TIME_STEPS, nb_entries)))\n",
    "    model.add(Dense(50, activation='relu', input_shape=(TIME_STEPS,\n",
    "    nb_entries)))\n",
    "    model.add(Dropout(rate=0.2))\n",
    "    model.add(Dense(25, activation='relu', input_shape=(TIME_STEPS,\n",
    "    nb_entries)))\n",
    "    model.add(Dense(25, activation='relu', input_shape=(TIME_STEPS,\n",
    "    nb_entries)))\n",
    "    model.add(Dropout(rate=0.2))\n",
    "    model.add(Dense(50, activation='relu', input_shape=(TIME_STEPS,\n",
    "    nb_entries)))\n",
    "    model.add(LSTM(100, activation='relu', return_sequences=True))\n",
    "    model.add(Dropout(rate=0.2))\n",
    "    model.add(TimeDistributed(Dense(nb_entries)))\n",
    "    model.compile(optimizer='adam', loss='mae', metrics=['mse'])\n",
    "    return model\n",
    "\n",
    "\n",
    "nb_entries = x_train.shape[2]\n",
    "TIME_STEPS = 288\n",
    "encoder = LSTMAE(TIME_STEPS, nb_entries)\n",
    "\n",
    "\n",
    "def fit_LSTMAE(obj, x_train, x_valid = None):\n",
    "    if x_valid is not None:\n",
    "        return obj.fit(x_train, x_train,\n",
    "                    epochs=100,\n",
    "                    batch_size=256,\n",
    "                    shuffle=True,\n",
    "                    validation_data=(x_valid, x_valid))\n",
    "    else:\n",
    "        return obj.fit(x_train, x_train,\n",
    "                    epochs=100,\n",
    "                    batch_size=256,\n",
    "                    shuffle=True)\n",
    "\n",
    "model = fit_LSTMAE(encoder, x_train, x_valid"
  ],
  "Valid": [
    "# Validation Prediction\n",
    "# Algo/LSTMAE\n",
    "\n",
    "def detect_anomalies_autoencoder(obj, x_test, sigma):\n",
    "    predicted = obj.predict(x_test)\n",
    "    errors = np.sum((x_test-predicted)**2, axis = 1)\n",
    "    errors = errors.reshape(-1)\n",
    "    median_err,std_err = np.median(errors), np.std(errors)\n",
    "    threshold = median_err+sigma*std_err\n",
    "    anomalies = -errors + threshold\n",
    "    return [i for i,a in enumerate(anomalies) if a < 0]\n",
    "\n",
    "anomalies_indexes_valid = detect_anomalies_autoencoder(encoder, x_valid, 3)\n"
  ],
  "Test": [
    "# Prediction\n",
    "# Algo/LSTMAE\n",
    "\n",
    "anomalies_indexes = detect_anomalies_autoencoder(encoder, x_test, 3)\n"
  ],
  "Imports": [
    "import numpy as np\n",
    "from keras.layers import LSTM, Dense, Dropout, RepeatVector, TimeDistributed\n",
    "from keras.models import Sequential\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n"
  ]
}
